// Converts a U64 to a 64_bit signed float.
// - x: The U64 to convert.
// = The F64 representation of the input U64.
U64/to_ieee754 : U64 -> F64
| 0 = 0.0
| n =
  let sign = (& (>> n 63) 0x1)
  let expo = (& (>> n 52) 0x7FF)
  let mant = (& n 0xFFFFFFFFFFFFF)
  (* (F64/pow (F64/negate 1.0) sign) (U64/to_ieee754/go expo mant))

U64/to_ieee754/go : U64 -> U64 -> F64
| 0   0 = 0.0 
| 0   m = (U64/subnormal m)
| e   0 = (U64/expo_only e)
| 1+e m = (U64/normal (+ 1 e) m)

U64/subnormal : U64 -> F64
| m with (U64/log 2 (/ (- (<< 1 52) 1) m))
. | 0 = (* (/ 1.0 (F64/pow 2.0 1022)) (U64/to_ieee754_frag m 52))
. | p = (* (/ 1.0 (F64/pow 2.0 1022)) (U64/to_ieee754_frag m (- 52 p)))

U64/expo_only : U64 -> F64
| e with (== e 2047)
. | 0 with (> e 1023) 
. . | 0 = (/ 1.0 (F64/pow 2.0 (- 1023 e)))
. . | p = (F64/pow 2.0 (- e 1023))        
. | i = (/ 1.0 0.0)

U64/normal : U64 -> U64 -> F64
| e m with (== e 2047)
. | 0 with (U64/log 2 (/ (- (<< 1 52) 1) m))
. . | 0 with (> e 1023)
. . . | 0 = (* (/ 1.0 (F64/pow 2.0 (- 1023 e))) (+ 1.0 (U64/to_ieee754_frag m 52)))
. . . | t = (* (F64/pow 2.0 (- e 1023)) (+ 1.0 (U64/to_ieee754_frag m 52)))
. . | p with (> e 1023)
. . . | 0 = (* (/ 1.0 (F64/pow 2.0 (- 1023 e))) (+ 1.0 (U64/to_ieee754_frag m (- 52 p))))
. . . | t = (* (F64/pow 2.0 (- e 1023)) (+ 1.0 (U64/to_ieee754_frag m (- 52 p))))
. | q = (/ 0.0 0.0)

U64/to_ieee754_frag : U64 -> U64 -> F64
| 0 mult = 0.0
| 1 mult = (/ 1.0 (F64/pow 2.0 mult))
| p mult = 
  let quotient  = (/ p 2)
  let remainder = (% p 2)
  if (U64/to_bool remainder) {
    (+ (/ 1.0 (F64/pow 2.0 mult)) (U64/to_ieee754_frag quotient (- mult 1)))
  } else {
    (U64/to_ieee754_frag quotient (- mult 1))
  }